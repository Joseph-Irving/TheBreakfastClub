# !!! generated by puppet !!!

[cache]

LOCAL_DATA_DIR = <%= scope.lookupvar('graphite::gr_local_data_dir') %>/

# Enable daily log rotation. If disabled, a kill -HUP can be used after a manual rotate
ENABLE_LOGROTATION = True

# This user must have write access to the local data directory
USER = <%= scope.lookupvar('graphite::gr_user') %>

# Sorts and serving cache queries gets more expensive as the cache grows.

# Use the value "inf" (infinity) for an unlimited cache size.
MAX_CACHE_SIZE = <%= scope.lookupvar('graphite::gr_max_cache_size') %>

MAX_UPDATES_PER_SECOND = <%= scope.lookupvar('graphite::gr_max_updates_per_second') %>

<% unless [:undef, nil].include? scope['graphite::gr_max_updates_per_second_on_shutdown'] -%>
  MAX_UPDATES_PER_SECOND_ON_SHUTDOWN = <%= scope['graphite::gr_max_updates_per_second_on_shutdown'] %>
<% end -%>

MAX_CREATES_PER_MINUTE = <%= scope.lookupvar('graphite::gr_max_creates_per_minute') %>

LINE_RECEIVER_INTERFACE = <%= scope.lookupvar('graphite::gr_line_receiver_interface') %>
LINE_RECEIVER_PORT = <%= scope.lookupvar('graphite::gr_line_receiver_port') %>

ENABLE_UDP_LISTENER = <%= scope.lookupvar('graphite::gr_enable_udp_listener') %>
UDP_RECEIVER_INTERFACE = <%= scope.lookupvar('graphite::gr_udp_receiver_interface') %>
UDP_RECEIVER_PORT = <%= scope.lookupvar('graphite::gr_udp_receiver_port') %>

PICKLE_RECEIVER_INTERFACE = <%= scope.lookupvar('graphite::gr_pickle_receiver_interface') %>
PICKLE_RECEIVER_PORT = <%= scope.lookupvar('graphite::gr_pickle_receiver_port') %>

# Set to false to disable logging of successful connections
LOG_LISTENER_CONNECTIONS = <%= scope.lookupvar('graphite::gr_log_listener_connections') %>

# Per security concerns outlined in Bug #817247 the pickle receiver
# will use a more secure and slightly less efficient unpickler.
# Set this to True to revert to the old-fashioned insecure unpickler.
USE_INSECURE_UNPICKLER = <%= scope.lookupvar('graphite::gr_use_insecure_unpickler') %>

CACHE_QUERY_INTERFACE = <%= scope.lookupvar('graphite::gr_cache_query_interface') %>
CACHE_QUERY_PORT = <%= scope.lookupvar('graphite::gr_cache_query_port') %>

USE_FLOW_CONTROL = True

LOG_UPDATES = False
LOG_CACHE_HITS = False
LOG_CACHE_QUEUE_SORTS = True

CACHE_WRITE_STRATEGY = <%= scope.lookupvar('graphite::gr_cache_write_strategy') %>

WHISPER_AUTOFLUSH = <%= scope.lookupvar('graphite::gr_whisper_autoflush') %>
WHISPER_FALLOCATE_CREATE = <%= scope.lookupvar('graphite::gr_whisper_fallocate_create') %>
WHISPER_LOCK_WRITES = <%= scope.lookupvar('graphite::gr_whisper_lock_writes') %>

USE_WHITELIST = <%= scope.lookupvar('graphite::gr_use_whitelist') %>

# seconds. Set CARBON_METRIC_INTERVAL to 0 to disable instrumentation
CARBON_METRIC_PREFIX = <%= scope.lookupvar('graphite::gr_carbon_metric_prefix') %>
CARBON_METRIC_INTERVAL = <%= scope.lookupvar('graphite::gr_carbon_metric_interval') %>

# Enable AMQP if you want to receve metrics using an amqp broker
ENABLE_AMQP = <%= scope.lookupvar('graphite::gr_amqp_enable') %>

# Verbose means a line will be logged for every metric received
# useful for testing
AMQP_VERBOSE = <%= scope.lookupvar('graphite::gr_amqp_verbose') %>

AMQP_HOST = <%= scope.lookupvar('graphite::gr_amqp_host') %>
AMQP_PORT = <%= scope.lookupvar('graphite::gr_amqp_port') %>
AMQP_VHOST = <%= scope.lookupvar('graphite::gr_amqp_vhost') %>
AMQP_USER = <%= scope.lookupvar('graphite::gr_amqp_user') %>
AMQP_PASSWORD = <%= scope.lookupvar('graphite::gr_amqp_password') %>
AMQP_EXCHANGE = <%= scope.lookupvar('graphite::gr_amqp_exchange') %>
AMQP_METRIC_NAME_IN_BODY = <%= scope.lookupvar('graphite::gr_amqp_metric_name_in_body') %>

<%
  cache_instances = scope.lookupvar('graphite::gr_cache_instances')
  if cache_instances != nil
    cache_instances.sort.each do |name, params| -%>
[<%= name %>]
<% params.sort.each do |param_name, param_value| -%>
<%= param_name %> = <%= param_value %>
<% end -%>

<%end; end -%>
[relay]
# Enable daily log rotation. If disabled, a kill -HUP can be used after a manual rotate
ENABLE_LOGROTATION = True

# Specify the user to drop privileges to
# If this is blank carbon runs as the user that invokes it
# This user must have write access to the local data directory
USER = <%= scope.lookupvar('graphite::gr_user') %>

LINE_RECEIVER_INTERFACE = <%= scope.lookupvar('graphite::gr_relay_line_interface') %>
LINE_RECEIVER_PORT = <%= scope.lookupvar('graphite::gr_relay_line_port') %>
PICKLE_RECEIVER_INTERFACE = <%= scope.lookupvar('graphite::gr_relay_pickle_interface') %>
PICKLE_RECEIVER_PORT = <%= scope.lookupvar('graphite::gr_relay_pickle_port') %>

# Set to false to disable logging of successful connections
LOG_LISTENER_CONNECTIONS = <%= scope.lookupvar('graphite::gr_relay_log_listener_connections') %>

#RELAY_METHOD = aggregated-consistent-hashing
RELAY_METHOD = <%= scope.lookupvar('graphite::gr_relay_method') %>

REPLICATION_FACTOR = <%= scope.lookupvar('graphite::gr_relay_replication_factor') %>
DESTINATIONS = <%= scope.lookupvar('graphite::gr_relay_destinations').join(', ') %>

MAX_DATAPOINTS_PER_MESSAGE = 500
MAX_QUEUE_SIZE = <%= scope.lookupvar('graphite::gr_relay_max_queue_size') %>
USE_FLOW_CONTROL = <%= scope.lookupvar('graphite::gr_relay_use_flow_control') %>
USE_WHITELIST = <%= scope.lookupvar('graphite::gr_use_whitelist') %>

# By default, carbon itself will log statistics (such as a count,
# metricsReceived) with the top level prefix of 'carbon' at an interval of 60
# seconds. Set CARBON_METRIC_INTERVAL to 0 to disable instrumentation
CARBON_METRIC_PREFIX = <%= scope.lookupvar('graphite::gr_carbon_metric_prefix') %>
CARBON_METRIC_INTERVAL = <%= scope.lookupvar('graphite::gr_carbon_metric_interval') %>

# Relay Instances
<%
  relay_instances = scope.lookupvar('graphite::gr_relay_instances')
  if relay_instances != nil
    relay_instances.sort.each do |name, params| -%>
[<%= name %>]
<% params.sort.each do |param_name, param_value| -%>
<%= param_name %> = <%= param_value %>
<% end -%>

<%end; end -%>

[aggregator]
# Enable daily log rotation. If disabled, a kill -HUP can be used after a manual rotate
ENABLE_LOGROTATION = True

# Specify the user to drop privileges to
# If this is blank carbon runs as the user that invokes it
# This user must have write access to the local data directory
USER = <%= scope.lookupvar('graphite::gr_user') %>

LINE_RECEIVER_INTERFACE = <%= scope.lookupvar('graphite::gr_aggregator_line_interface') %>
LINE_RECEIVER_PORT = <%= scope.lookupvar('graphite::gr_aggregator_line_port') %>
PICKLE_RECEIVER_INTERFACE = <%= scope.lookupvar('graphite::gr_aggregator_pickle_interface') %>
PICKLE_RECEIVER_PORT = <%= scope.lookupvar('graphite::gr_aggregator_pickle_port') %>

# Set this to True to enable the UDP listener. By default this is off
# because it is very common to run multiple carbon daemons and managing
# another (rarely used) port for every carbon instance is not fun.
ENABLE_UDP_LISTENER = <%= scope.lookupvar('graphite::gr_aggregator_enable_udp_listener') %>
UDP_RECEIVER_INTERFACE = <%= scope.lookupvar('graphite::gr_aggregator_udp_receiver_interface') %>
UDP_RECEIVER_PORT = <%= scope.lookupvar('graphite::gr_aggregator_udp_receiver_port') %>

# Set to false to disable logging of successful connections
LOG_LISTENER_CONNECTIONS = <%= scope.lookupvar('graphite::gr_aggregator_log_listener_connections') %>

# If set true, metric received will be forwarded to DESTINATIONS in addition to
# the output of the aggregation rules. If set false the carbon-aggregator will
# only ever send the output of aggregation.
FORWARD_ALL = <%= scope.lookupvar('graphite::gr_aggregator_forward_all') %>

DESTINATIONS = <%= scope.lookupvar('graphite::gr_aggregator_destinations').join(', ') %>

# If you want to add redundancy to your data by replicating every
# datapoint to more than one machine, increase this.
REPLICATION_FACTOR = <%= scope.lookupvar('graphite::gr_aggregator_replication_factor') %>

# This is the maximum number of datapoints that can be queued up
# for a single destination. Once this limit is hit, we will
# stop accepting new data if USE_FLOW_CONTROL is True, otherwise
# we will drop any subsequently received datapoints.
MAX_QUEUE_SIZE = <%= scope.lookupvar('graphite::gr_aggregator_max_queue_size') %>

# Set this to False to drop datapoints when any send queue (sending datapoints
# to a downstream carbon daemon) hits MAX_QUEUE_SIZE. If this is True (the
# default) then sockets over which metrics are received will temporarily stop accepting
# data until the send queues fall below 80% MAX_QUEUE_SIZE.
USE_FLOW_CONTROL = <%= scope.lookupvar('graphite::gr_aggregator_use_flow_control') %>

# This defines the maximum "message size" between carbon daemons.
# You shouldn't need to tune this unless you really know what you're doing.
MAX_DATAPOINTS_PER_MESSAGE = 500

# This defines how many datapoints the aggregator remembers for
# each metric. Aggregation only happens for datapoints that fall in
# the past MAX_AGGREGATION_INTERVALS * intervalSize seconds.
MAX_AGGREGATION_INTERVALS = <%= scope.lookupvar('graphite::gr_aggregator_max_intervals') %>

USE_WHITELIST = <%= scope.lookupvar('graphite::gr_use_whitelist') %>

# By default, carbon itself will log statistics (such as a count,
# metricsReceived) with the top level prefix of 'carbon' at an interval of 60
# seconds. Set CARBON_METRIC_INTERVAL to 0 to disable instrumentation
CARBON_METRIC_PREFIX = <%= scope.lookupvar('graphite::gr_carbon_metric_prefix') %>
CARBON_METRIC_INTERVAL = <%= scope.lookupvar('graphite::gr_carbon_metric_interval') %>

# Aggregator Instances
<%
  aggregator_instances = scope.lookupvar('graphite::gr_aggregator_instances')
  if aggregator_instances != nil
    aggregator_instances.sort.each do |name, params| -%>
[<%= name %>]
<% params.sort.each do |param_name, param_value| -%>
<%= param_name %> = <%= param_value %>
<% end -%>

<%end; end -%>
